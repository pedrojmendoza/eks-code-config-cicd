---
AWSTemplateFormatVersion: 2010-09-09

Description: EKSWSV1

Parameters:

  EksClusterNameDev:
    Type: String
    Description: The name of the EKS cluster created in the DEV env (continuous deployment)
    Default: eksworkshop-eksctl
    MinLength: 1
    MaxLength: 100
    ConstraintDescription: You must enter the EKS cluster name

  EksClusterNameProd:
    Type: String
    Description: The name of the EKS cluster created in the PROD env (manual deployment)
    Default: eksworkshop-eksctl
    MinLength: 1
    MaxLength: 100
    ConstraintDescription: You must enter the EKS cluster name

  GitLabOrganization:
    Type: String
    Description: GitLab organization containing the repositories
    Default: pedrojmendoza
    MinLength: 1
    MaxLength: 100
    ConstraintDescription: You must enter a GitLab organization name
    
  GitCodeRepo:
    Type: String
    Description: Git repository for code
    Default: SpringBootCode
    MinLength: 1
    MaxLength: 100
    ConstraintDescription: You must enter a Git repository name

  GitCodeBranch:
    Type: String
    Default: master
    Description: Git repository branch for code - change triggers a new build
    MinLength: 1
    MaxLength: 100
    ConstraintDescription: You must enter a Git repository branch name

  GitConfigRepo:
    Type: String
    Description: Git repository for config
    Default: SpringBootConfig
    MinLength: 1
    MaxLength: 100
    ConstraintDescription: You must enter a Git repository name

  GitConfigBranch:
    Type: String
    Default: master
    Description: Git repository branch for config - change triggers a new build
    MinLength: 1
    MaxLength: 100
    ConstraintDescription: You must enter a Git repository branch name

  GitLabS3Bucket:
    Type: String
    Description: S3 bucket used in the integration with GitLab
    MinLength: 3
    MaxLength: 63
    ConstraintDescription: You must enter an S3 bucket name integrated with GitLab repos

  CodeBuildDockerImage:
    Type: String
    Default: aws/codebuild/standard:2.0
    Description: Default AWS CodeBuild Docker optimized image
    MinLength: 3
    MaxLength: 100
    ConstraintDescription: You must enter a CodeBuild Docker image

  KubectlRoleName:
    Type: String
    Default: CodeBuildEksRole
    Description: IAM role name (in the target accounts) used by kubectl to interact with EKS cluster
    MinLength: 3
    MaxLength: 100
    ConstraintDescription: You must enter a kubectl IAM role

  TargetAccountNumberDev:
    Description: AWS AccountNumber where EKS cluster used for automated deployment is
    Type: Number

  TargetAccountNumberProd:
    Description: AWS AccountNumber where EKS cluster used for manual deployment is
    Type: Number

  EcrDockerRepository:
    Description: Name of the ECR repo to be used to store docker images
    Type: String

  k8sConfigFilename:
    Description: Name of the k8s config file
    Type: String
    Default: hello-k8s.yml

  JarOutputFilename:
    Description: Name of the output JAR file after building/pkg
    Type: String
    Default:  myspringboot-0.0.1-SNAPSHOT.jar

Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Git
        Parameters:
          - GitLabOrganization
          - GitCodeRepo
          - GitCodeBranch
          - GitConfigRepo
          - GitConfigBranch
          - GitLabS3Bucket
      - Label:
          default: CodeBuild
        Parameters:
          - CodeBuildDockerImage
          - k8sConfigFilename
          - JarOutputFilename
      - Label:
          default: ECR/EKS
        Parameters:
          - EcrDockerRepository
          - EksClusterNameDev
          - EksClusterNameProd
          - KubectlRoleName
      - Label:
          default: Target accounts
        Parameters:
          - TargetAccountNumberDev
          - TargetAccountNumberProd

Resources:

  CodePipelineArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: codepipeline-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:UploadArchive
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:CancelUploadArchive
                  - iam:PassRole
              - Resource: !Sub arn:aws:s3:::${CodePipelineArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: !Sub arn:aws:s3:::${GitLabS3Bucket}/*
                Effect: Allow
                Action:
                  - s3:*
              - Resource: !Sub arn:aws:s3:::${GitLabS3Bucket}
                Effect: Allow
                Action:
                  - s3:*
    DependsOn: CodePipelineArtifactBucket

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: 
                  - !Sub arn:aws:iam::${TargetAccountNumberDev}:role/${KubectlRoleName}
                  - !Sub arn:aws:iam::${TargetAccountNumberProd}:role/${KubectlRoleName}
                Effect: Allow
                Action:
                  - sts:AssumeRole
              - Resource: '*'
                Effect: Allow
                Action:
                  - eks:Describe*
              - Resource: '*'
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Resource: '*'
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
              - Resource: '*'
                Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeDhcpOptions
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeVpcs
                  - ec2:CreateNetworkInterfacePermission
              - Resource: !Sub arn:aws:s3:::${CodePipelineArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${EcrDockerRepository}
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
              - Resource: !Sub arn:aws:s3:::${GitLabS3Bucket}/*
                Effect: Allow
                Action:
                  - s3:*

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                java: openjdk11
                docker: 18
              commands:
                - curl -sS -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-07-26/bin/linux/amd64/aws-iam-authenticator
                - curl -sS -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-07-26/bin/linux/amd64/kubectl
                - chmod +x ./kubectl ./aws-iam-authenticator
                - export PATH=$PWD/:$PATH
                - apt-get update && apt-get -y install jq python3-pip python3-dev && pip3 install --upgrade awscli
            pre_build:
              commands:
                - POM_VERSION=$(xmllint --xpath "//*[local-name()='project']/*[local-name()='version']/text()" pom.xml)
                - TAG="$REPOSITORY_NAME.$POM_VERSION"
                - cp $CODEBUILD_SRC_DIR_AppConfig/$K8S_CONFIG_FILE_NAME .
                - sed -i 's@CONTAINER_IMAGE@'"$REPOSITORY_URI:$TAG"'@' $K8S_CONFIG_FILE_NAME
                - $(aws ecr get-login --no-include-email)
                - export KUBECONFIG=$HOME/.kube/config
            build:
              commands:
                - mvn package
                - docker build --build-arg JAR_FILE=target/$JAR_OUTPUT_FILE_NAME --tag $REPOSITORY_URI:$TAG .
            post_build:
              commands:
                - docker push $REPOSITORY_URI:$TAG
                - CREDENTIALS=$(aws sts assume-role --role-arn $EKS_KUBECTL_ROLE_ARN --role-session-name codebuild-kubectl --duration-seconds 900)
                - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
                - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
                - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
                - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
                - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME
                - kubectl apply -f $K8S_CONFIG_FILE_NAME
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: !Ref CodeBuildDockerImage
        PrivilegedMode: True
        EnvironmentVariables:
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrDockerRepository}
          - Name: REPOSITORY_NAME
            Value: !Ref GitCodeRepo
          - Name: K8S_CONFIG_FILE_NAME
            Value: !Ref k8sConfigFilename
          - Name: JAR_OUTPUT_FILE_NAME
            Value: !Ref JarOutputFilename
          - Name: EKS_CLUSTER_NAME
            Value: !Ref EksClusterNameDev
          - Name: EKS_KUBECTL_ROLE_ARN
            Value: !Sub arn:aws:iam::${TargetAccountNumberDev}:role/${KubectlRoleName}
      Name: !Ref AWS::StackName
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn

  CodeBuildDeployOnlyProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                docker: 18
              commands:
                - curl -sS -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-07-26/bin/linux/amd64/aws-iam-authenticator
                - curl -sS -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-07-26/bin/linux/amd64/kubectl
                - chmod +x ./kubectl ./aws-iam-authenticator
                - export PATH=$PWD/:$PATH
                - apt-get update && apt-get -y install jq python3-pip python3-dev && pip3 install --upgrade awscli
            pre_build:
              commands:
                - aws s3 cp "s3://$CONFIG_S3_LOCATION.$EKS_CONFIG_SHA_TO_DEPLOY.zip" config.zip
                - unzip config.zip
                - TAG="$REPOSITORY_NAME.$EKS_VERSION_TO_DEPLOY"
                - sed -i 's@CONTAINER_IMAGE@'"$REPOSITORY_URI:$TAG"'@' $K8S_CONFIG_FILE_NAME
                - $(aws ecr get-login --no-include-email)
                - export KUBECONFIG=$HOME/.kube/config
            post_build:
              commands:
                - CREDENTIALS=$(aws sts assume-role --role-arn $EKS_KUBECTL_ROLE_ARN --role-session-name codebuild-kubectl --duration-seconds 900)
                - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
                - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
                - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
                - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
                - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME
                - kubectl apply -f $K8S_CONFIG_FILE_NAME
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: !Ref CodeBuildDockerImage
        EnvironmentVariables:
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrDockerRepository}
          - Name: REPOSITORY_NAME
            Value: !Ref GitCodeRepo
          - Name: K8S_CONFIG_FILE_NAME
            Value: !Ref k8sConfigFilename
          - Name: EKS_CLUSTER_NAME
            Value: !Ref EksClusterNameProd
          - Name: CONFIG_S3_LOCATION
            Value: !Sub ${GitLabS3Bucket}/${GitLabOrganization}/${GitConfigRepo}/${GitConfigBranch}/${GitConfigRepo}
          - Name: EKS_KUBECTL_ROLE_ARN
            Value: !Sub arn:aws:iam::${TargetAccountNumberProd}:role/${KubectlRoleName}
          - Name: EKS_VERSION_TO_DEPLOY
            Value: REPLACE_ME_WITH_CODE_VERSION_TO_DEPLOY
          - Name: EKS_CONFIG_SHA_TO_DEPLOY
            Value: REPLACE_ME_WITH_CONFIG_SHA_TO_DEPLOY
      Name: !Sub ${AWS::StackName}-DeployOnly
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: AppCode
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: S3
              Configuration:
                S3Bucket: !Ref GitLabS3Bucket
                S3ObjectKey: !Sub ${GitLabOrganization}/${GitCodeRepo}/${GitCodeBranch}/${GitCodeRepo}.zip
              OutputArtifacts:
                - Name: AppCode
              RunOrder: 1
            - Name: AppConfig
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: S3
              Configuration:
                S3Bucket: !Ref GitLabS3Bucket
                S3ObjectKey: !Sub ${GitLabOrganization}/${GitConfigRepo}/${GitConfigBranch}/${GitConfigRepo}.zip
              OutputArtifacts:
                - Name: AppConfig
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
                PrimarySource: AppCode
              InputArtifacts:
                - Name: AppCode
                - Name: AppConfig
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
    DependsOn: CodeBuildProject
